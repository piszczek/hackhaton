{% extends 'base.html.twig' %}

{% block title %}New Route{% endblock %}

{% block body %}

    <section class="section">
        <div class="wrapper">
            <div class="white-bg">
                <div class="mdl-grid">
                    <div class="mdl-cell mdl-cell--4-col">
                        <h5>Transit details:</h5>
                        <div class="parameters">
                            {{ include('route/_form.html.twig') }}
                        </div>
                    </div>
                    <div class="mdl-cell mdl-cell--8-col">
                        <h5 style="color: #E10226 ;"> Choose 2 points:</h5>
                        <div id="map-section-container" class="map-section__container">
                            <div id="map" class="map"></div>
                        </div>
                        <script src="/static/js/Router.js"></script>
                        <script>
                            async function initMap() {
                                let index = 'startPoint';
                                let minLatLngHolder = {startPoint: null, endPoint: null};
                                const routes = JSON.parse('{{ sections|raw }}');
                                const refinery = {lat: 52.588353, lng: 19.672254};
                                const map = new google.maps.Map(
                                    document.getElementById('map'), {zoom: 13.98, center: refinery, mapTypeId: google.maps.MapTypeId.HYBRID}
                                );

                                google.maps.event.addListener(map, 'click', (event) => {
                                    let minDistance = 4000;
                                    let latLngHolder = null;
                                    let idHolder = 0;
                                    for (route of routes) {
                                        let routeLatLng = new google.maps.LatLng(route[index].lat, route[index].lng);
                                        let distance = google.maps.geometry.spherical.computeDistanceBetween(event.latLng, routeLatLng);
                                        if (distance < minDistance) {
                                            minDistance = distance;
                                            latLngHolder = routeLatLng;
                                            idHolder = route[index].id;
                                        }
                                    }
                                    minLatLngHolder[index] = idHolder;
                                    document.querySelector('#route_'+index).value = minLatLngHolder[index];
                                    index = 'endPoint';
                                    let marker = new google.maps.Marker({
                                        position: latLngHolder,
                                        title: index
                                    });
                                    marker.setMap(map);
                                    if (null !== minLatLngHolder.startPoint && null !== minLatLngHolder.endPoint) {
                                        google.maps.event.clearListeners(map, 'click');
                                        return false;
                                    }
                                });
                            }
                        </script>
                        <script async defer
                                src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA-a3f8Q6ZosKYXXjaIUoO_ad_yPq-iVjI&libraries=geometry&callback=initMap">
                        </script>
                    </div>
                </div>
            </div>
        </div>
    </section>

{% endblock %}
