{% extends 'base.html.twig' %}

{% block body %}

    <section class="map-section">
        <div class="wrapper">
            <div class="white-bg">
                <h5>Konfiguracja mapy</h5>
                <div id="map-section-container" class="map-section__container">
                    <div id="map" class="map"></div>
                    <div id="polyline-modal" class="polyline-modal">
                        <div class="loader">
                            <div class="lds-ellipsis">
                                <div></div>
                                <div></div>
                                <div></div>
                                <div></div>
                            </div>
                        </div>
                    </div>
                </div>
                <script src="/static/js/Router.js"></script>
                <script>
                    let currentPolyline = null;

                    const editPolyline = (polyline) => {
                        const polylineId = polyline['elementId'];
                        const modal = document.querySelector('#polyline-modal');
                        const router = new Router();
                        const mapDetails = document.querySelector('#map-section-container');
                        if (null !== currentPolyline) {
                            currentPolyline.setOptions({strokeColor: '#FF0000'});
                        }
                        currentPolyline = polyline;
                        currentPolyline.setOptions({strokeColor: '#f4ff30'});
                        modal.classList.add('show');
                        mapDetails.classList.add('active');
                        router.makeRequest({
                            'method': 'GET',
                            'url': '{{ path('section_edit', {'id': '__ID__'}) }}'.replace('__ID__', polylineId),
                            'headers': {
                                'X-Requested-With': 'XMLHttpRequest',
                            },
                        }).then(response => {
                            modal.innerHTML = response;
                            var arr = modal.getElementsByTagName('script');
                            for (var n = 0; n < arr.length; n++)
                                eval(arr[n].innerHTML)//run script inside div

                            const sectionForm = document.querySelector('form');
                            sectionForm.addEventListener('submit', event => {
                                event.preventDefault();

                                const formData = new FormData(sectionForm);

                                router.makeRequest({
                                    'method': 'POST',
                                    'url': sectionForm.getAttribute('action'),
                                    'headers': {
                                        'X-Requested-With': 'XMLHttpRequest',
                                    },
                                    'parameters': formData
                                }).then(response => {
                                    modal.innerHTML = null;
                                    currentPolyline.setOptions({strokeColor: '#FF0000'});
                                }).catch(error => {
                                    console.error(error);
                                })
                            })
                        }).catch(error => {
                            alert('Error occurred :( Please, refresh site and try again!');
                            console.error(error);
                        });
                    };

        async function initMap() {
            const routes = JSON.parse('{{ sections|raw }}');
            const refinery = {lat: 52.588353, lng: 19.672254};
            const map = new google.maps.Map(
                document.getElementById('map'), {zoom: 13.98, center: refinery, mapTypeId: google.maps.MapTypeId.HYBRID}
            );

            for (let route of routes) {
                let routePolyline = new google.maps.Polyline({
                    path: [route.startPoint, route.endPoint],
                    geodesic: true,
                    strokeColor: '#FF0000',
                    strokeOpacity: 1.0,
                    strokeWeight: 4,
                    elementId: route.id
                });
                routePolyline.setMap(map);
                google.maps.event.addListener(routePolyline, 'click', () => editPolyline(routePolyline))
            }
        }
    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA-a3f8Q6ZosKYXXjaIUoO_ad_yPq-iVjI&callback=initMap">
    </script>
{% endblock %}
